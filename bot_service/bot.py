import requests
import telebot
from telebot import types
from types import SimpleNamespace
import random
from config import BOT_TOKEN, BASE_URL, ROLES_CONFIG, TRANSLATE_CONFIG
from datetime import datetime, timedelta

bot = telebot.TeleBot(BOT_TOKEN)


def format_date(iso_string):
    months = {
        1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
        5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞",
        9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
    }

    # –ü–∞—Ä—Å–∏–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
    dt = datetime.strptime(iso_string, "%Y-%m-%dT%H:%M:%S")

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π –≤–∏–¥
    return f"{dt.day} {months[dt.month]} –≤ {dt.strftime('%H:%M')}"

def is_master(id):
    response = requests.get(f"{BASE_URL}/players/{id}")
    return response.json()["is_master"]

@bot.callback_query_handler(func=lambda call: call.data == "main_menu")
def call_main_menu(call):
    main_menu(call.message, 1)

def main_menu(message, is_call=0):
    games_cnt = requests.get(f"{BASE_URL}/game/list").json()["count"]
    regisrations_cnt = requests.get(f"{BASE_URL}/game/registrations", json={"player_id": message.chat.id}).json()["count"]
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ò–≥—Ä—ã", callback_data="menu_games"), types.InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stat"))
    if is_call:
        bot.edit_message_text(chat_id=message.chat.id, message_id=message.id, text=f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ –≥–æ—Ä–æ–¥!\n–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {games_cnt} –∏–≥—Ä\n–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ {regisrations_cnt} –∏–≥—Ä", reply_markup=keyboard, parse_mode='HTML')
    else:
        bot.send_message(chat_id=message.chat.id, text=f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ –≥–æ—Ä–æ–¥!\n–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {games_cnt} –∏–≥—Ä\n–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ {regisrations_cnt} –∏–≥—Ä", reply_markup=keyboard, parse_mode='HTML')

@bot.message_handler(commands=["start"])
def start_command(message):
    print("start")
    response = requests.get(f"{BASE_URL}/players/{message.chat.id}")
    if (response.status_code // 100 == 2):
        print("OK")
        main_menu(message)
    else:
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–± –º–∞—Ñ–∏–∏ –ú–ò–†–≠–ê! –î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫:")
        bot.register_next_step_handler(message, get_name)

def get_name(message):
    bot.send_message(message.chat.id, f"–û—Å—Ç–∞–ª–∞—Å—å –≥—Ä—É–ø–ø–∞ (XXXX-00-00):")
    bot.register_next_step_handler(message, get_group, message.text)

def get_group(message, name):
    loading = bot.send_message(message.chat.id, "–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é...")
    response = requests.post(f"{BASE_URL}/reg", json={
        "ID": message.chat.id,
        "nickname": name,
        "username": message.from_user.username,
        "group_name": message.text})
    if (response.status_code // 100 == 2):
        bot.edit_message_text(chat_id=message.chat.id, message_id=loading.id, text="–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Å–ø–µ—Ö")
        main_menu(message)
    else:
        bot.edit_message_text(chat_id=message.chat.id, message_id=loading.id, text=f"–û—à–∏–±–∫–∞ API: {response.content}")

@bot.callback_query_handler(func=lambda call: call.data == "menu_games")
def cancel_handler(call):
    response = requests.get(f"{BASE_URL}/game/list")
    msg_str = "–ò–ì–†–´:\n"
    regisrations = [i["game_id"] for i in requests.get(f"{BASE_URL}/game/registrations", json={"player_id": call.message.chat.id}).json()["registrations"]]
    keyboard = types.InlineKeyboardMarkup()
    for i in response.json()["games"]:
        msg_str += f"\n–ò–ì–†–ê ‚Ññ{i['game_id']}------------------\n–ü—Ä–æ–π–¥—ë—Ç {format_date(i['date'].replace(' ', 'T'))}\n–¢–∏–ø –∏–≥—Ä—ã: {'–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è' if i['type'] == 'classic'  else '–ì–æ—Ä–æ–¥—Å–∫–∞—è'}\n–í–µ–¥—É—â–∏–π: –ì-–Ω(–∂–∞) {i['master_nickname']}\n–ê—É–¥–∏—Ç–æ—Ä–∏—è: {i['room']}\n–ú–∞–∫—Å –∫–æ–ª-–≤–æ –∏–≥—Ä–æ–∫–æ–≤: {i['slots_cnt']}\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {i['registrations']}\n"
        if (i["game_id"] in regisrations):
            keyboard.add(types.InlineKeyboardButton(text=f"–ò–ì–†–ê ‚Ññ{i['game_id']} (–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)", callback_data=f"gameInfo_{i['game_id']}"))
        else:
            keyboard.add(types.InlineKeyboardButton(text=f"–ò–ì–†–ê ‚Ññ{i['game_id']}", callback_data=f"gameInfo_{i['game_id']}"))
    keyboard.add(types.InlineKeyboardButton(
        text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
        callback_data=call.data
    ))
    if (is_master(call.message.chat.id)):
        keyboard.add(types.InlineKeyboardButton(text=f"–°–û–ó–î–ê–¢–¨", callback_data=f"new_game"))
    keyboard.add(types.InlineKeyboardButton(text=f"–ù–∞–∑–∞–¥", callback_data=f"main_menu"))
    try:
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=msg_str, reply_markup=keyboard)
    except:
        print("no changes")

@bot.callback_query_handler(func=lambda call: call.data.startswith("gameInfo_"))
def game_info(call, edit=0):
    game_id = int(call.data.split('_')[1])
    regisrations = [i["game_id"] for i in requests.get(f"{BASE_URL}/game/registrations", json={"player_id": call.message.chat.id}).json()["registrations"]]
    i = requests.get(f"{BASE_URL}/game/{game_id}").json()
    msg_text = f"\n–ò–ì–†–ê ‚Ññ{i['game_id']}------------------\n–ü—Ä–æ–π–¥—ë—Ç {format_date(i['date'].replace(' ', 'T'))}\n–¢–∏–ø –∏–≥—Ä—ã: {'–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è' if i['type'] == 'classic'  else '–ì–æ—Ä–æ–¥—Å–∫–∞—è'}\n–í–µ–¥—É—â–∏–π: –ì-–Ω(–∂–∞) {i['master_nickname']}\n–ê—É–¥–∏—Ç–æ—Ä–∏—è: {i['room']}\n–ú–∞–∫—Å –∫–æ–ª-–≤–æ –∏–≥—Ä–æ–∫–æ–≤: {i['slots_cnt']}\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {i['players_count']}\n{'–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏:' if i['players_count'] else '–ë—É–¥—å –ø–µ—Ä–≤—ã–º!'}\n"
    cnt = 0
    for player in sorted(
        i["registered_players"],
        key=lambda x: (1, x['registered_at']) if x['slot'] == 0 else (0, x['slot'])
    ):
        cnt += 1
        slot = player['slot']
        role = TRANSLATE_CONFIG[player['role']] if is_master(call.message.chat.id) else "???"
        msg_text += f"{'' if slot == 0 else f'–°–ª–æ—Ç {slot} | '}–ì-–Ω {player['nickname']} | {'–í –æ—á–µ—Ä–µ–¥–∏' if cnt > i['slots_cnt'] else '‚úÖ' if role == 'None' else f'{role}'}\n"
        if (cnt == i['slots_cnt']):
            msg_text += "---------------\n"
    keyboard = types.InlineKeyboardMarkup()
    if (game_id in regisrations):
        keyboard.add(types.InlineKeyboardButton(text=f"–ù–µ —Å–º–æ–≥—É :(", callback_data=f"unregOfGame_{game_id}"))
    else:
        keyboard.add(types.InlineKeyboardButton(text=f"–ì–û!", callback_data=f"regToGame_{game_id}"))
    if (is_master(call.message.chat.id)):
        #keyboard.add(types.InlineKeyboardButton(text=f"–≤—Ä–µ–º—è", callback_data=f"changeGameTime_{game_id}"), types.InlineKeyboardButton(text=f"–∞—É–¥–∏—Ç–æ—Ä–∏—è", callback_data=f"changeGameRoom_{game_id}"))
        keyboard.add(types.InlineKeyboardButton(text=f"–†–æ–ª–∏", callback_data=f"rolesGame_{game_id}"), types.InlineKeyboardButton(text=f"–†–∞—Å—Å–∞–¥–∫–∞", callback_data=f"slotsGame_auto_{game_id}"))
        keyboard.add(types.InlineKeyboardButton(text=f"–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"finishGame_{game_id}"))
        keyboard.add(types.InlineKeyboardButton(text=f"–û–¢–ú–ï–ù–ò–¢–¨", callback_data=f"cancelGame_{game_id}"))
    keyboard.add(types.InlineKeyboardButton(text=f"–ù–∞–∑–∞–¥", callback_data=f"menu_games"))
    if edit == 0:
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=msg_text, reply_markup=keyboard)
    else:
        bot.send_message(chat_id=call.message.chat.id, text=msg_text, reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith("slotsGame_auto_"))
def slotsGameAuto(call):
    game_id = int(call.data.split('_')[2])
    response = requests.put(f'{BASE_URL}/games/{game_id}/slots')
    print(response.json())
    if (response.status_code // 100 == 2):
        err_str = ""
        for player_id, slot in zip(response.json()['players'], response.json()['slots']):
            try:
                bot.send_message(player_id, f"–ò–ì–†–ê ‚Ññ{game_id}\n–í–∞—à–µ –∏–≥—Ä–æ–≤–æ–µ –º–µ—Å—Ç–æ: {slot}")
            except:
                err_str += f"\n–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {player_id}: {slot}"
        if err_str:
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                                  text=f"–û—à–∏–±–∫–∞ –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ:{err_str}")
        else:
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                                  text=f"–°–ª–æ—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        game_info(SimpleNamespace(
                    message=SimpleNamespace(
                        chat=SimpleNamespace(id=call.message.chat.id)
                    ),
                    data=f"hello_{game_id}"
                ), 1
            )
    else:
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=f"–û—à–∏–±–∫–∞ API: {response.content}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("rolesGame_auto_"))
def rolesGameAuto(call):
    game_id = int(call.data.split('_')[2])
    response = requests.put(f'{BASE_URL}/games/{game_id}/roles')
    if (response.status_code // 100 == 2):
        err_str = ""
        game_type = requests.get(f'{BASE_URL}/game/{game_id}').json()["type"]
        for player_id, role in zip(response.json()['players'], response.json()['roles']):
            try:
                keyboard = telebot.types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton(text="–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å", callback_data=f"cardShirt_{game_id}_{role}_0_{game_type}"))
                bot.send_photo(player_id, open(f"../resources/{game_type}/card_shirt.jpg", "rb"), caption=f"–ò–ì–†–ê ‚Ññ{game_id}\n–í–∞—à–∞ –∫–∞—Ä—Ç–∞: ???", reply_markup=keyboard)
            except Exception as e:
                print(e)
                err_str += f"\n–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {player_id}: {role}"
        if err_str:
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=f"–û—à–∏–±–∫–∞ –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ:{err_str}")
        else:
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=f"–†–æ–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        game_info(SimpleNamespace(
            message=SimpleNamespace(
                chat=SimpleNamespace(id=call.message.chat.id)
            ),
            data=f"hello_{game_id}"
        ), 1
        )
    elif (response.status_code == 401):
        bot.edit_message_text(chat_id=call.message.chat.id, text=f"–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤")
    else:
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=f"–û—à–∏–±–∫–∞ API: {response.content}")


@bot.callback_query_handler(func=lambda call: call.data.startswith("cardShirt_"))
def cardShirt(call):
    game_id = int(call.data.split('_')[1])
    role = call.data.split('_')[2]
    is_open = int(call.data.split('_')[3])
    game_type = call.data.split('_')[4]
    try:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text="–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å", callback_data=f"cardShirt_{game_id}_{role}_0_{game_type}" if is_open else f"cardShirt_{game_id}_{role}_1_{game_type}"))
        media = types.InputMediaPhoto(
            media=open(f"../resources/{game_type}/card_shirt.jpg" if is_open else f"../resources/{game_type}/{role}.jpg", 'rb'),
            caption=f"–ò–ì–†–ê ‚Ññ{game_id}\n–í–∞—à–∞ –∫–∞—Ä—Ç–∞: {'???' if is_open else TRANSLATE_CONFIG[role]}"
        )

        bot.edit_message_media(
            chat_id=call.message.chat.id,
            message_id=call.message.id,
            media=media,
            reply_markup=keyboard
        )
    except FileNotFoundError:
        bot.answer_callback_query(
            call.id,
            f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–æ–ª–∏ {role} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
            show_alert=True
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
        bot.answer_callback_query(
            call.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–∞—Ä—Ç—ã",
            show_alert=True
        )

user_sessions = {}

@bot.callback_query_handler(func=lambda call: call.data.startswith("rolesGame_force_"))
def start_role_distribution(call):
    chat_id = call.message.chat.id
    game_id = int(call.data.split('_')[2])
    print(game_id)
    response = requests.get(f"{BASE_URL}/game/{game_id}")
    if (response.status_code // 100 != 2):
        return bot.send_message(chat_id, response.json()["error"])
    game_type = response.json()["type"]
    slots_cnt = min(response.json()["players_count"], response.json()["slots_cnt"])
    print(slots_cnt)
    config_key = str(slots_cnt)
    if config_key not in ROLES_CONFIG[game_type]:
        return bot.send_message(chat_id, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤")

    user_sessions[chat_id] = {
        "game_id": game_id,
        "slots_cnt": int(slots_cnt),
        "current_slot": 1,
        "roles": [],
        "remaining_roles": ROLES_CONFIG[game_type][config_key].copy()
    }

    ask_role(chat_id, call.message.id)


def ask_role(chat_id, message_id):
    session = user_sessions.get(chat_id)
    if not session:
        return

    keyboard = types.InlineKeyboardMarkup()
    for role in set(session['remaining_roles']):
        count = session['remaining_roles'].count(role)
        keyboard.add(types.InlineKeyboardButton(
            text=f"{role} ({count})",
            callback_data=f"role_select_{role}"
        ))

    bot.edit_message_text(
        chat_id=chat_id,
        message_id=message_id,
        text=f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è —Å–ª–æ—Ç–∞ {session['current_slot']}:",
        reply_markup=keyboard
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("role_select_"))
def handle_role_selection(call):
    chat_id = call.message.chat.id
    session = user_sessions.get(chat_id)
    if not session:
        return

    selected_role = call.data.split('_')[2]

    try:
        session['remaining_roles'].remove(selected_role)
    except ValueError:
        return bot.answer_callback_query(call.id, "–†–æ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞")

    session['roles'].append(selected_role)
    session['current_slot'] += 1

    if session['current_slot'] > session['slots_cnt']:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        response = requests.put(
            f"{BASE_URL}/games/{session['game_id']}/force_roles",
            json={"roles": session['roles']}
        )
        print(session['roles'])
        print(response.json())
        if response.status_code // 100 == 2:
            bot.send_message(chat_id, "–†–æ–ª–∏ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã!")
            game_info(SimpleNamespace(
                message=SimpleNamespace(
                    chat=SimpleNamespace(id=call.message.chat.id)
                ),
                data=f"hello_{session['game_id']}"
            ), 1
            )
        else:
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π")
        del user_sessions[chat_id]
    else:
        ask_role(chat_id, call.message.id)


@bot.callback_query_handler(func=lambda call: call.data.startswith("rolesGame_"))
def rolesGame(call):
    game_id = int(call.data.split('_')[1])
    print(game_id)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text=f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", callback_data=f"rolesGame_auto_{game_id}"))
    keyboard.add(types.InlineKeyboardButton(text=f"–†—É—á–Ω–æ–π –≤–≤–æ–¥", callback_data=f"rolesGame_force_{game_id}"))
    keyboard.add(types.InlineKeyboardButton(text=f"–ù–∞–∑–∞–¥", callback_data=f"gameInfo_{game_id}"))
    bot.send_message(chat_id=call.message.chat.id, text=f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–¥–∞—á–∞ - –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∏—Ö —Ä–æ–ª—å—é\n"
                                                                                         f"–†—É—á–Ω–æ–π –≤–≤–æ–¥ - –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±\n---\n–°–ù–ê–ß–ê–õ–ê –ù–ï–û–ë–•–û–î–ò–ú–û –í–´–ü–û–õ–ù–ò–¢–¨ –†–ê–°–°–ê–î–ö–£!", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith("slotsGame_"))
def rolesGame(call):
    game_id = int(call.data.split('_')[1])
    print(game_id)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text=f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", callback_data=f"slotsGame_auto_{game_id}"))
    keyboard.add(types.InlineKeyboardButton(text=f"–†—É—á–Ω–æ–π –≤–≤–æ–¥", callback_data=f"slotsGame_force_{game_id}"))
    keyboard.add(types.InlineKeyboardButton(text=f"–ù–∞–∑–∞–¥", callback_data=f"gameInfo_{game_id}"))
    bot.send_message(chat_id=call.message.chat.id, text=f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å–∞–¥–∫–∞ - –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∏—Ö —Å–ª–æ—Ç–æ–º\n"
                                                                                         f"–†—É—á–Ω–æ–π –≤–≤–æ–¥ - –ø–æ–æ—á–µ—Ä—ë–¥–Ω—ã–π –≤—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞ (1, 2 ... n)", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith("finishGame_"))
def finishGame(call):
    game_id = int(call.data.split('_')[1])
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text=f"–ü–æ–±–µ–¥–∞ –ú–∏—Ä–Ω—ã—Ö", callback_data=f"Win_1_{game_id}"))
    keyboard.add(types.InlineKeyboardButton(text=f"–ü–æ–±–µ–¥–∞ –ú–∞—Ñ–∏–∏", callback_data=f"Win_0_{game_id}"))
    keyboard.add(types.InlineKeyboardButton(text=f"–ù–∞–∑–∞–¥", callback_data=f"gameInfo_{game_id}"))
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=f"–£–∫–∞–∂–∏—Ç–µ –ø–æ–±–µ–¥–∏–≤—à—É—é –∫–æ–º–∞–Ω–¥—É", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith("Win_"))
def finishGame_Win(call):
    game = call.data.split('_')
    response = requests.post(f"{BASE_URL}/games/{int(game[2])}/finish", json={"civilians_win": int(game[1])})
    if (response.status_code // 100 == 2):
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=f"–ò–≥—Ä–∞ ‚Ññ{int(game[2])} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–ü–æ–±–µ–¥–∞ {'–º–∏—Ä–Ω—ã—Ö' if bool(game[1]) else '–º–∞—Ñ–∏–∏'}!")
        main_menu(call.message)
    else:
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=f"–û—à–∏–±–∫–∞ API: {response.content}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("cancelGame_"))
def cancelGame(call):
    game_id = int(call.data.split('_')[1])
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text=f"–ü–û–î–¢–í–ï–†–î–ò–¢–¨", callback_data=f"forceCancelGame_{game_id}"))
    keyboard.add(types.InlineKeyboardButton(text=f"–ù–∞–∑–∞–¥", callback_data=f"gameInfo_{game_id}"))
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∏–≥—Ä—ã ‚Ññ{game_id}", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith("forceCancelGame_"))
def forceCancelGame(call):
    game_id = int(call.data.split('_')[1])
    response = requests.delete(f"{BASE_URL}/game/{game_id}")
    if (response.status_code // 100 == 2):
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=f"–ò–≥—Ä–∞ ‚Ññ{game_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        main_menu(call.message)
    else:
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=f"–û—à–∏–±–∫–∞ API: {response.content}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("unregOfGame_"))
def regToGame(call):
    game_id = int(call.data.split('_')[1])
    print(game_id)
    response = requests.delete(f"{BASE_URL}/game/unreg", json={
        "player_id": call.message.chat.id,
        "game_id": game_id})
    bot.register_callback_query_handler(call, game_info)
    game_info(call, 0)

@bot.callback_query_handler(func=lambda call: call.data.startswith("regToGame_"))
def regToGame(call):
    game_id = int(call.data.split('_')[1])
    print(game_id)
    response = requests.post(f"{BASE_URL}/game/reg", json={
        "player_id": call.message.chat.id,
        "game_id": game_id})
    bot.register_callback_query_handler(call, game_info)
    game_info(call, 0)

@bot.callback_query_handler(func=lambda call: call.data == "new_game")
def new_game(call):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text=f"–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ", callback_data=f"new_game_type_classic"))
    keyboard.add(types.InlineKeyboardButton(text=f"–ì–æ—Ä–æ–¥—Å–∫–∏–µ", callback_data=f"new_game_type_extended"))
    keyboard.add(types.InlineKeyboardButton(text=f"–ù–∞–∑–∞–¥", callback_data=f"menu_games"))
    bot.send_message(call.message.chat.id, f"–ü–æ –∫–∞–∫–∏–º –ø—Ä–∞–≤–∏–ª–∞–º –∏–≥—Ä–∞–µ–º?", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith("new_game_type_"))
def new_game_type(call):
    game_type = call.data.split('_')[3]
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton(text="10", callback_data=f"new_game_cnt_{game_type}_10"),
        types.InlineKeyboardButton(text="–±–µ–∑ –ª–∏–º–∏—Ç–∞", callback_data=f"new_game_cnt_{game_type}_100")
    )
    keyboard.add(types.InlineKeyboardButton(text="–≤–≤–µ—Å—Ç–∏", callback_data=f"new_game_forceCNT_{game_type}"))
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∏–≥—Ä–æ–∫–∞–º:", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith("new_game_cnt_"))
def handle_predefined_slots(call):
    _, _, _, game_type, slots_cnt = call.data.split('_')
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é:")
    bot.register_next_step_handler(call.message, process_audience, game_type, slots_cnt)


@bot.callback_query_handler(func=lambda call: call.data.startswith("new_game_forceCNT_"))
def handle_custom_slots_input(call):
    game_type = call.data.split('_')[3]
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤:")
    bot.register_next_step_handler(call.message, process_custom_slots_cnt, game_type)


def process_custom_slots_cnt(message, game_type):
    try:
        slots_cnt = int(message.text)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é:")
        bot.register_next_step_handler(message, process_audience, game_type, slots_cnt)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        bot.register_next_step_handler(message, process_custom_slots_cnt, game_type)


def process_audience(message, game_type, slots_cnt):
    chat_id = message.chat.id
    room = message.text
    user_sessions[chat_id] = {
        'game_type': game_type,
        'slots_cnt': slots_cnt,
        'room': room
    }
    show_date_selection(message, chat_id, 0, 0)


def show_date_selection(message, chat_id, offset=0, edit=1):
    start_date = datetime.now() + timedelta(days=offset)
    dates = [start_date + timedelta(days=i) for i in range(7)]

    keyboard = types.InlineKeyboardMarkup(row_width=3)

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_row = []
    if offset > 0:
        nav_row.append(types.InlineKeyboardButton(
            text="‚Üê –ü—Ä–µ–¥",
            callback_data=f"date_nav_{offset - 7}"
        ))
    if offset < 7:
        nav_row.append(types.InlineKeyboardButton(
            text="–°–ª–µ–¥ ‚Üí",
            callback_data=f"date_nav_{offset + 7}"
        ))
    if nav_row:
        keyboard.add(*nav_row)

    buttons = [
        types.InlineKeyboardButton(
            text=f"{date.strftime('%d.%m')} ({date.strftime('%a')})",
            callback_data=f"select_date_{date.strftime('%Y-%m-%d')}"
        )
        for date in dates
    ]

    keyboard.add(*buttons[:3])
    keyboard.add(*buttons[3:6])
    keyboard.add(buttons[6])

    if edit:
        bot.edit_message_reply_markup(
            chat_id=chat_id,
            message_id=message.message_id,
            reply_markup=keyboard
        )
    else:
        bot.send_message(
            chat_id,
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–≥—Ä—ã:",
            reply_markup=keyboard
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith("date_nav_"))
def handle_date_nav(call):
    offset = int(call.data.split('_')[2])
    show_date_selection(call.message, call.message.chat.id, offset)

@bot.callback_query_handler(func=lambda call: call.data.startswith("select_date_"))
def handle_select_date(call):
    chat_id = call.message.chat.id
    date_str = call.data.split('_')[2]
    user_sessions[chat_id]['date'] = datetime.strptime(date_str, "%Y-%m-%d")
    show_time_selection(call.message.chat.id)


def show_time_selection(chat_id):
    times = ["9:00", "10:30", "12:40", "14:20", "16:20", "18:00"]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    for time in times:
        keyboard.add(types.InlineKeyboardButton(text=time, callback_data=f"select_time_{time}"))
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã:", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith("select_time_"))
def handle_select_time(call):
    chat_id = call.message.chat.id
    time_str = call.data.split('_')[2]

    try:
        game_data = user_sessions[chat_id]
        date_obj = game_data['date']
        time_obj = datetime.strptime(time_str, "%H:%M").time()
        full_datetime = datetime.combine(date_obj.date(), time_obj)

        response = requests.post(
            f"{BASE_URL}/game/create",
            json={
                "type": game_data['game_type'],
                "slots_cnt": game_data['slots_cnt'],
                "room": game_data['room'],
                "masterID": chat_id,
                "date": full_datetime.isoformat()
            }
        )
        print(response.content)
        bot.send_message(chat_id, f"–ò–≥—Ä–∞ ‚Ññ{response.json()['game_id']} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        del user_sessions[chat_id]
        main_menu(call.message)

    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞: {str(e)}")
        del user_sessions[chat_id]

@bot.callback_query_handler(func=lambda call: call.data == "stat")
def stat(call):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text=f"–í—Å–µ –∏–≥—Ä—ã", callback_data=f"stat_all"))
    keyboard.add(types.InlineKeyboardButton(text=f"–ö–ª–∞—Å—Å–∏–∫–∞", callback_data=f"stat_classic"))
    keyboard.add(types.InlineKeyboardButton(text=f"–ì–æ—Ä–æ–¥—Å–∫–∞—è", callback_data=f"stat_extended"))
    keyboard.add(types.InlineKeyboardButton(text=f"–ù–∞–∑–∞–¥", callback_data=f"main_menu"))
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–≥—Ä—ã", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith("stat_"))
def stat_for(call):
    try:
        type = call.data.split('_')[1]
        response = requests.get(f'{BASE_URL}/stats/{type}/players')
        response.raise_for_status()
        data = response.json()

        sorted_stats = sorted(data['stats'],
                              key=lambda x: (-x['games'],
                                             -x['wins'] / x['games'] if x['games'] > 0 else 0))

        message_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ ({'–ö–ª–∞—Å—Å–∏–∫–∞' if type == 'classic' else '–ì–æ—Ä–æ–¥—Å–∫–∞—è' if type == 'extended' else '–í—Å–µ –∏–≥—Ä—ã'}) –ø–æ–±–µ–¥ –∏–∑ –æ–æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –∏–≥—Ä | –≤–∏–Ω—Ä–µ–π—Ç\n\n"

        for idx, player in enumerate(sorted_stats, 1):
            total_winrate = (player['wins'] / player['games'] * 100) if player['games'] > 0 else 0

            roles_text = "\n".join([
                f"üë§ –ú–∏—Ä–Ω—ã–π: {player['civilian']['wins']} –∏–∑ {player['civilian']['games']} | {(player['civilian']['wins'] / player['civilian']['games'] * 100) if player['civilian']['games'] > 0 else 0:.1f}%",
                f"üïµÔ∏è –®–µ—Ä–∏—Ñ: {player['sheriff']['wins']} –∏–∑ {player['sheriff']['games']} | {(player['sheriff']['wins'] / player['sheriff']['games'] * 100) if player['sheriff']['games'] > 0 else 0:.1f}%",
                f"üî´ –ú–∞—Ñ–∏—è: {player['mafia']['wins']} –∏–∑ {player['mafia']['games']} | {(player['mafia']['wins'] / player['mafia']['games'] * 100) if player['mafia']['games'] > 0 else 0:.1f}%",
                f"üëë –î–æ–Ω: {player['don']['wins']} –∏–∑ {player['don']['games']} | {(player['don']['wins'] / player['don']['games'] * 100) if player['don']['games'] > 0 else 0:.1f}%"
            ])
            if type != 'classic':
                roles_text += f"\nüíâ –î–æ–∫—Ç–æ—Ä: {player['doctor']['wins']} –∏–∑ {player['doctor']['games']} | {(player['doctor']['wins'] / player['doctor']['games'] * 100) if player['doctor']['games'] > 0 else 0:.1f}%"

            message_text += (
                f"üèÜ –ì-–Ω (–ì-–∂–∞) {player['nickname']}\n"
                f"üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {player['games']}\n"
                f"üìà –û–±—â–∏–π –≤–∏–Ω—Ä–µ–π—Ç: {total_winrate:.1f}%\n"
                f"{roles_text}\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            )

        keyboard = types.InlineKeyboardMarkup()
        refresh_btn = types.InlineKeyboardButton(
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
            callback_data=call.data
        )
        keyboard.add(refresh_btn)
        keyboard.add(types.InlineKeyboardButton(text=f"–ù–∞–∑–∞–¥", callback_data=f"stat"))
        try:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=message_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        except:
            print("no changes")

    except requests.exceptions.RequestException as e:
        error_text = f"üö´ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
        bot.answer_callback_query(call.id, error_text, show_alert=True)
    except Exception as e:
        error_text = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞"
        print(e)
        bot.answer_callback_query(call.id, error_text, show_alert=True)

if __name__ == "__main__":
    bot.infinity_polling()